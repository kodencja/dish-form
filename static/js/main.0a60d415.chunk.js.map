{"version":3,"sources":["img sync /^/.*/.jpg$","img/pizza.jpg","img/sandwich.jpg","img/soup.jpg","img/veg10.jpg","img/veg4.jpg","img/veg8.jpg","components/Input.jsx","components/Form.jsx","components/useValidation.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Input","React","forwardRef","ref","tagType","title","errorMsg","optionNames","props","state","useContext","DishContext","onState","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","outputStyle","loading","validationFinished","name","options","useMemo","ind","defaultValue","hidden","label","value","select","className","htmlFor","input","val","range","style","memo","Form","onTypeVal","onSubmit","dishContext","handleChanging","onChanging","addToInputRef","onAddToInputRef","forPizzaRef","useRef","forSoupRef","forSandwichRef","nameRef","timeRef","selectRef","useEffect","undefined","current","classList","add","remove","setTimeout","forPizza","step","required","min","max","onChange","check","forSoup","forSandwich","placeholder","pattern","onClick","useValidation","dispatch","arrayOfAllChecksValue","checkTimeLength","isValidTime","time","length","test","RegExp","onValidation","dataToCheck","size","Promise","reject","timeChecked","count","eachProp","valueWithoutSpaces","toString","split","join","push","nameObj","payload","arrayOfAllChecksVal","validator","isAlpha","isNumeric","valueWithoutSpacesToNumber","parseInt","parseFloat","createContext","inputInitState","sort","initialState","left","sizeOfSubmittedObject","finalResponse","reducer","action","App","useReducer","titleRef","inputRef","feedbackRef","dataToSend","answerRef","dishesRef","btnRef","forEach","el","getAttribute","elVal","getOutputStyle","JSON","stringify","method","url","headers","data","disabled","axios","then","response","console","log","catch","error","message","elName","useCallback","inputVal","elTrg","unit","styles","getComputedStyle","padding","paddingLeft","paddingRight","elWidth","clientWidth","bubbleWidth","document","documentElement","getPropertyValue","thumbWidth","thumbBorderWidth","refObjMin","refObjMax","ratio","chooseDataToValidate","types","baseData","handleSubmit","a","preventDefault","dataToValidate","sizeOfObjectToValid","every","addToFeedbackRef","includes","image","alt","src","require","default","Provider","onDispatch","target","nameTrg","onInputRef","onAddToFeedbackRef","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0a60d415.chunk.js","sourcesContent":["var map = {\n\t\"./pizza.jpg\": 151,\n\t\"./sandwich.jpg\": 152,\n\t\"./soup.jpg\": 153,\n\t\"./veg10.jpg\": 154,\n\t\"./veg4.jpg\": 155,\n\t\"./veg8.jpg\": 156\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 150;","export default __webpack_public_path__ + \"static/media/pizza.a8e2abcd.jpg\";","export default __webpack_public_path__ + \"static/media/sandwich.4c85b99e.jpg\";","export default __webpack_public_path__ + \"static/media/soup.eae9ab6c.jpg\";","export default __webpack_public_path__ + \"static/media/veg10.e9165112.jpg\";","export default __webpack_public_path__ + \"static/media/veg4.5db3e508.jpg\";","export default __webpack_public_path__ + \"static/media/veg8.d77e34bf.jpg\";","import React, { useContext, useMemo } from \"react\";\r\nimport { DishContext } from \"../App\";\r\n\r\n// function Input({ tagType, title, errorMsg, optionNames = \"\", ...props }) {\r\nconst Input = React.forwardRef(\r\n  ({ tagType, title, errorMsg, optionNames = \"\", ...props }, ref) => {\r\n    const dishContext = useContext(DishContext);\r\n    const state = dishContext.onState;\r\n\r\n    const {\r\n      preparation_time,\r\n      type,\r\n      no_of_slices,\r\n      diameter,\r\n      spiciness_scale,\r\n      slices_of_bread,\r\n      outputStyle,\r\n      loading,\r\n      validationFinished,\r\n    } = state;\r\n\r\n    const { name } = props;\r\n\r\n    const options = useMemo(() => {\r\n      if (tagType === \"select\") {\r\n        return [...optionNames].map((name, ind) => {\r\n          if (name === \"default\") {\r\n            return (\r\n              <option defaultValue hidden label=\" \" key={ind}>\r\n                select an option\r\n              </option>\r\n            );\r\n          } else {\r\n            return (\r\n              <option value={name} key={ind}>\r\n                {name}\r\n              </option>\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        return null;\r\n      }\r\n    }, [type]);\r\n\r\n    const select = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <select {...props} ref={ref}>\r\n            {options}\r\n          </select>\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [type, loading, validationFinished]);\r\n\r\n    const input = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <input {...props} ref={ref} />\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [\r\n      preparation_time,\r\n      type.val,\r\n      no_of_slices,\r\n      diameter,\r\n      state.name,\r\n      slices_of_bread,\r\n      name,\r\n    ]);\r\n\r\n    const range = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <input {...props} ref={ref} />\r\n          <output className=\"bubble\" style={outputStyle} htmlFor={name}>\r\n            {state[name][\"val\"]}\r\n          </output>\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [type, spiciness_scale, outputStyle]);\r\n\r\n    return (\r\n      <>{tagType === \"input\" ? input : tagType === \"select\" ? select : range}</>\r\n    );\r\n  }\r\n);\r\n\r\n// export default Input;\r\nexport default React.memo(Input);\r\n","import React, { useContext, useEffect, useMemo, useRef } from \"react\";\r\nimport { DishContext } from \"../App\";\r\nimport Input from \"./Input\";\r\n\r\nconst Form = React.forwardRef(({ onTypeVal, onSubmit }, ref) => {\r\n  const dishContext = useContext(DishContext);\r\n  const state = dishContext.onState;\r\n  const handleChanging = dishContext.onChanging;\r\n  const addToInputRef = dishContext.onAddToInputRef;\r\n\r\n  const forPizzaRef = useRef();\r\n  const forSoupRef = useRef();\r\n  const forSandwichRef = useRef();\r\n  const nameRef = useRef();\r\n  const timeRef = useRef();\r\n  const selectRef = useRef();\r\n\r\n  const {\r\n    name,\r\n    preparation_time,\r\n    type,\r\n    no_of_slices,\r\n    diameter,\r\n    spiciness_scale,\r\n    slices_of_bread,\r\n  } = state;\r\n\r\n  useEffect(() => {\r\n    // console.log(no_of_slices);\r\n    // console.log(spiciness_scale);\r\n    // console.log(spiciness_scale[\"val\"]);\r\n    // console.log(slices_of_bread);\r\n    // console.log(slices_of_bread[\"val\"]);\r\n  });\r\n\r\n  // handle input appearing animation\r\n  useEffect(() => {\r\n    if (forPizzaRef.current !== undefined && forPizzaRef.current !== null) {\r\n      forPizzaRef.current.classList.add(\"show-up\");\r\n      forPizzaRef.current.classList.remove(\"hide-up\");\r\n    }\r\n    if (\r\n      forSandwichRef.current !== undefined &&\r\n      forSandwichRef.current !== null\r\n    ) {\r\n      forSandwichRef.current.classList.add(\"show-right\");\r\n      forSandwichRef.current.classList.remove(\"hide-right\");\r\n    }\r\n    if (forSoupRef.current !== undefined && forSoupRef.current !== null) {\r\n      forSoupRef.current.classList.add(\"show-left\");\r\n      forSoupRef.current.classList.remove(\"hide-left\");\r\n    }\r\n    if (nameRef.current !== undefined && nameRef.current !== null) {\r\n      setTimeout(() => {\r\n        nameRef.current.classList.add(\"show-left\");\r\n        nameRef.current.classList.remove(\"hide-left\");\r\n      }, 750);\r\n    }\r\n    if (timeRef.current !== undefined && timeRef.current !== null) {\r\n      setTimeout(() => {\r\n        timeRef.current.classList.add(\"show-right\");\r\n        timeRef.current.classList.remove(\"hide-right\");\r\n      }, 1250);\r\n    }\r\n    if (selectRef.current !== undefined && selectRef.current !== null) {\r\n      setTimeout(() => {\r\n        selectRef.current.classList.add(\"show-up\");\r\n        selectRef.current.classList.remove(\"hide-up\");\r\n      }, 1750);\r\n    }\r\n    if (ref.current !== undefined && ref.current !== null) {\r\n      setTimeout(() => {\r\n        ref.current.classList.add(\"show-down\");\r\n        ref.current.classList.remove(\"hide-down\");\r\n      }, 2250);\r\n    }\r\n  }, [type]);\r\n\r\n  const forPizza = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"flex hide-up\" ref={forPizzaRef}>\r\n            <div className=\"one-column\">\r\n              <Input\r\n                tagType=\"input\"\r\n                title=\"No of slices\"\r\n                name=\"no_of_slices\"\r\n                type=\"number\"\r\n                id=\"no_of_slices\"\r\n                className=\"form-control\"\r\n                step={1}\r\n                aria-label=\"no_of_slices\"\r\n                required={onTypeVal === \"pizza\" ? true : false}\r\n                min={1}\r\n                max={30}\r\n                value={no_of_slices[\"val\"]}\r\n                onChange={handleChanging}\r\n                ref={addToInputRef}\r\n                errorMsg={no_of_slices.check}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"one-column\">\r\n              <Input\r\n                tagType=\"input\"\r\n                title=\"diameter\"\r\n                name=\"diameter\"\r\n                type=\"number\"\r\n                id=\"diameter\"\r\n                className=\"form-control\"\r\n                step={0.1}\r\n                aria-label=\"diameter\"\r\n                required={onTypeVal === \"pizza\" ? true : false}\r\n                min={0.1}\r\n                max={50}\r\n                value={diameter[\"val\"]}\r\n                onChange={handleChanging}\r\n                ref={addToInputRef}\r\n                errorMsg={diameter.check}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, diameter, no_of_slices]);\r\n\r\n  const forSoup = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto narrow\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"range hide-left\" ref={forSoupRef}>\r\n            {/* <div className=\"range input-cont hide-up\" ref={forSoupRef}> */}\r\n            {/* <div className=\"mrg-x-auto hide-up\" ref={forSoupRef}> */}\r\n            <Input\r\n              tagType=\"range\"\r\n              title=\"Spiciness scale\"\r\n              name=\"spiciness_scale\"\r\n              type=\"range\"\r\n              id=\"spiciness_scale\"\r\n              className=\"form-control form-control-range\"\r\n              step={1}\r\n              aria-label=\"spiciness_scale\"\r\n              required={onTypeVal === \"soup\" ? true : false}\r\n              data-sizing=\"px\"\r\n              min={1}\r\n              max={10}\r\n              value={spiciness_scale[\"val\"]}\r\n              onChange={handleChanging}\r\n              ref={addToInputRef}\r\n              errorMsg={spiciness_scale.check}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, spiciness_scale]);\r\n\r\n  const forSandwich = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto narrow\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"number-width hide-right\" ref={forSandwichRef}>\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"No of slices\"\r\n              name=\"slices_of_bread\"\r\n              type=\"number\"\r\n              id=\"slices_of_bread\"\r\n              className=\"form-control\"\r\n              step={1}\r\n              aria-label=\"slices_of_bread\"\r\n              required={onTypeVal === \"sandwich\" ? true : false}\r\n              min={1}\r\n              value={slices_of_bread.val}\r\n              // value={state[slices_of_bread][\"val\"]}\r\n              onChange={handleChanging}\r\n              ref={addToInputRef}\r\n              errorMsg={slices_of_bread.check}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, slices_of_bread]);\r\n\r\n  return (\r\n    <form id=\"dishes-form\">\r\n      <div className=\"row center\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"hide-left narrow-70 mrg-x-auto\" ref={nameRef}>\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"Dish name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              placeholder=\"Type dish name\"\r\n              aria-label=\"name\"\r\n              required={true}\r\n              value={name[\"val\"]}\r\n              onChange={handleChanging}\r\n              ref={addToInputRef}\r\n              errorMsg={name.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-cont\">\r\n          <div className=\"hide-right narrow-70 mrg-x-auto\" ref={timeRef}>\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"Preparation time\"\r\n              name=\"preparation_time\"\r\n              type=\"time\"\r\n              id=\"preparation_time\"\r\n              className=\"form-control\"\r\n              step={1}\r\n              aria-label=\"preparation_time\"\r\n              required={true}\r\n              min={\"00:15:00\"}\r\n              pattern={\"[0-9]{2}:[0-9]{2}:[0-9]{2}\"}\r\n              value={preparation_time[\"val\"]}\r\n              onChange={handleChanging}\r\n              ref={addToInputRef}\r\n              errorMsg={preparation_time.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-cont\">\r\n          <div className=\"hide-up narrow-70 mrg-x-auto\" ref={selectRef}>\r\n            <Input\r\n              tagType=\"select\"\r\n              title=\"Type\"\r\n              name=\"type\"\r\n              id=\"type\"\r\n              className=\"form-control form-control-lg\"\r\n              optionNames={[\"default\", \"pizza\", \"soup\", \"sandwich\"]}\r\n              aria-label=\"type\"\r\n              required={true}\r\n              value={type[\"val\"]}\r\n              onChange={handleChanging}\r\n              ref={addToInputRef}\r\n              errorMsg={type.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {onTypeVal === \"pizza\"\r\n          ? forPizza\r\n          : onTypeVal === \"soup\"\r\n          ? forSoup\r\n          : onTypeVal === \"sandwich\"\r\n          ? forSandwich\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"row center\">\r\n        <div className=\"buttons col\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-check hide-down\"\r\n            ref={ref}\r\n            onClick={onSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n  // };\r\n});\r\n\r\n// export default Form;\r\nexport default React.memo(Form);\r\n","import { useRef } from \"react\";\r\nimport validator from \"validator\";\r\n\r\nconst useValidation = (dispatch) => {\r\n  const arrayOfAllChecksValue = useRef([]);\r\n  const checkTimeLength = useRef();\r\n\r\n  // check time format\r\n  // 3 groups of 2 character separated by : each character must be a digit contained in that specific ranges\r\n  const isValidTime = (time) => {\r\n    checkTimeLength.current = \"\";\r\n    if (time.length < 8) {\r\n      time = time + \":00\";\r\n    } \r\n\r\n    if (time < \"00:15:00\") {\r\n      checkTimeLength.current = \"We need at least 15 min to prepare the dish!\";\r\n    }\r\n    const regexpAll = new RegExp(\r\n      /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/\r\n    );\r\n\r\n    return {test: regexpAll.test(time), time: time};\r\n  };\r\n\r\n  // main validation function\r\n  const onValidation = (dataToCheck, size) => {\r\n\r\n    arrayOfAllChecksValue.current = [];\r\n    return new Promise((resolve, reject) => {\r\n      let count = 0, timeChecked;\r\n      for (let eachProp in dataToCheck) {\r\n        count++;\r\n\r\n        // get rid of whitespaces\r\n        const valueWithoutSpaces = dataToCheck[eachProp][\"val\"]\r\n          .toString()\r\n          .split(\" \")\r\n          .join(\"\");\r\n\r\n        // if there is no data or it is NaN though should be a number\r\n        if (valueWithoutSpaces.length <= 0 || valueWithoutSpaces === \"NaN\") {\r\n          arrayOfAllChecksValue.current.push(false);\r\n          dispatch({\r\n            type: \"input_check\",\r\n            nameObj: `${eachProp}`,\r\n            payload: \"This field has to be filled in\",\r\n          });\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: dataToCheck.preparation_time.val });\r\n        } else if (valueWithoutSpaces.length > 30) {\r\n          arrayOfAllChecksValue.current.push(false);\r\n          dispatch({\r\n            type: \"input_check\",\r\n            nameObj: `${eachProp}`,\r\n            payload: \"Use max 30 characters\",\r\n          });\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: dataToCheck.preparation_time.val });\r\n        } else {\r\n          // run validation accordingly to the input 'type' ('sort' in state)\r\n          switch (dataToCheck[eachProp][\"sort\"]) {\r\n            case \"text\":\r\n              if (!validator.isAlpha(valueWithoutSpaces)) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only letters\",\r\n                });\r\n              } else {\r\n                arrayOfAllChecksValue.current.push(true);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"\",\r\n                });\r\n              }\r\n              break;\r\n\r\n            case \"intNumber\":\r\n            case \"floatNumber\":\r\n              // if value of the number fits within 'min' and 'max' attributes check\r\n              if (!validator.isNumeric(valueWithoutSpaces)) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only numbers\",\r\n                });\r\n              } else {\r\n                // if the value is NUMERIC, CHECK IF THE VALUE IS NOT TOO BIG OR NOT TOO SMALL accordingly its 'min' and 'max' attributes set in the input attributes and in the state\r\n                let valueWithoutSpacesToNumber;\r\n\r\n                if (eachProp === \"intNumber\") {\r\n                  valueWithoutSpacesToNumber = parseInt(valueWithoutSpaces);\r\n                } else {\r\n                  valueWithoutSpacesToNumber = parseFloat(valueWithoutSpaces);\r\n                }\r\n                let min, max;\r\n                if (\r\n                  dataToCheck[eachProp][\"min\"] !== null &&\r\n                  dataToCheck[eachProp][\"min\"] !== undefined\r\n                ) {\r\n                  min = dataToCheck[eachProp][\"min\"];\r\n                }\r\n                if (\r\n                  dataToCheck[eachProp][\"max\"] !== null &&\r\n                  dataToCheck[eachProp][\"max\"] !== undefined\r\n                ) {\r\n                  max = dataToCheck[eachProp][\"max\"];\r\n                }\r\n\r\n                if (valueWithoutSpacesToNumber < min) {\r\n                  arrayOfAllChecksValue.current.push(false);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"The number is too small\",\r\n                  });\r\n\r\n                } else if (valueWithoutSpacesToNumber > max) {\r\n                  arrayOfAllChecksValue.current.push(false);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"The number is too big\",\r\n                  });\r\n                } else {\r\n                  arrayOfAllChecksValue.current.push(true);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"\",\r\n                  });\r\n                }\r\n              }\r\n\r\n              break;\r\n\r\n            case \"time\":\r\n              const { test, time } = isValidTime(valueWithoutSpaces);\r\n              timeChecked = time;\r\n              if (!test) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only numbers in time format\",\r\n                });\r\n              } else if (\r\n                test &&\r\n                checkTimeLength.current !== \"\"\r\n              ) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: checkTimeLength.current,\r\n                });\r\n              } else {\r\n                arrayOfAllChecksValue.current.push(true);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"\",\r\n                });\r\n              }\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        if (count >= size) {\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: timeChecked });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return { onValidation };\r\n};\r\n\r\nexport default useValidation;\r\n","import React, { useEffect, useReducer, useRef, useCallback } from \"react\";\nimport Form from \"./components/Form\";\n// import FormComp from \"./components/FormComp\";\nimport \"./App.css\";\nimport \"./css/style.css\";\nimport useValidation from \"./components/useValidation\";\nimport axios from \"axios\";\n\nexport const DishContext = React.createContext();\n\n// 'val' = value, 'sort' = type of input, 'check' = prop for message got back after validation\n// 'min' and 'max' are attributes of inputs - I put them here so prevent user from manipulating these values in the browser\nconst inputInitState = {\n  name: { val: \"\", sort: \"text\", check: \"\" },\n  preparation_time: { val: \"00:15:00\", sort: \"time\", check: \"\" },\n  type: { val: \"\", sort: \"text\", check: \"\" },\n  no_of_slices: { val: 1, sort: \"intNumber\", check: \"\", min: 1, max: 30 },\n  diameter: { val: 0.1, sort: \"floatNumber\", check: \"\", min: 0.1, max: 50 },\n  spiciness_scale: { val: 1, sort: \"intNumber\", check: \"\", min: 1, max: 10 },\n  slices_of_bread: { val: 1, sort: \"intNumber\", check: \"\", min: 1 },\n}\n\nconst initialState = {\n  ...inputInitState,\n  outputStyle: { left: \"0\" },\n  sizeOfSubmittedObject: 0,\n  validationFinished: \"not\",\n  finalResponse: \"Hungry?\",\n  loading: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // for setting inputs' values in the state\n    case \"input\":\n      return {\n        ...state,\n        [action.nameObj]: { ...state[action.nameObj], val: action.payload },\n      };\n\n    // for setting \"check\" prop of input object in the state (replay) after validation of the input' value\n    case \"input_check\":\n      return {\n        ...state,\n        [action.nameObj]: { ...state[action.nameObj], check: action.payload },\n      };\n\n    // to set value of simple type of objects / vars: strings, number or boolean (sizeOfSubmittedObject, validationFinished, finalResponse, loading)\n    case \"one_value\":\n      return { ...state, [action.nameObj]: action.payload };\n\n    // to set left value of the \"bubble\" output\n    case \"outputStyle\":\n      return {\n        ...state,\n        outputStyle: { ...state.outputStyle, left: action.payload },\n        // outputStyle: { ...state.outputStyle, marginLeft: action.payload },\n      };\n\n    case \"reset\":\n      return {\n        ...state,\n        ...inputInitState,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // custom hook for validation of data form\n  const { onValidation } = useValidation(dispatch);\n\n  // main title ref\n  const titleRef = useRef();\n\n  // array of inputs' refs\n  const inputRef = useRef([]);\n\n  // an array of feedbackRef/ 'invalid-feedback' div's refs\n  const feedbackRef = useRef([]);\n\n  const dataToSend = useRef({});\n\n  // refs to particular divs\n  const answerRef = useRef();\n  const dishesRef = useRef();\n\n  // ref to submit btn\n  const btnRef = useRef();\n\n  const {\n    name,\n    preparation_time,\n    type,\n    no_of_slices,\n    diameter,\n    spiciness_scale,\n    slices_of_bread,\n    validationFinished,\n    finalResponse,\n    outputStyle,\n    loading,\n  } = state;\n\n  useEffect(() => {\n    // console.log(type.val);\n  });\n\n  // handle main title appearing\n  useEffect(()=>{\n    titleRef.current.classList.add(\"drop-fast\");\n    titleRef.current.classList.remove(\"hide-upper\");\n  },[])\n\n  useEffect(() => {\n    // call a function to set a left distance of bubble with the default value - dedicated to \"range\" type input\n    if (inputRef.current !== undefined && inputRef.current !== null) {\n      inputRef.current.forEach((el) => {\n\n        const elType = el.getAttribute(\"type\");\n        if (elType === \"range\") {\n          const elVal = el.getAttribute(\"value\");\n          getOutputStyle(elVal, el, \"%\");\n        }\n      });\n    }\n  }, [type]);\n\n  // final step with API Post Request\n  useEffect(() => {\n    if (validationFinished === \"ok\") {\n      dataToSend.current = JSON.stringify(dataToSend.current);\n\n      // console.log(\"Data to be send:\");\n      // console.log(dataToSend.current);\n\n      inputRef.current.forEach((el) => {\n        el.classList.remove(\"inCorrect\");\n        el.classList.add(\"correct\");\n      });\n      feedbackRef.current.forEach((el) => {\n        el.classList.add(\"afterValidation\");\n      });\n\n      const options = {\n        method: \"POST\",\n        url: \"https://jsonplaceholder.typicode.com/posts\",\n        headers: { \"Content-type\": \"application/json\" },\n        data: dataToSend.current,\n      };\n\n      answerRef.current.classList.remove(\"bad\");\n      answerRef.current.classList.add(\"wait\");\n\n      dispatch({ type: \"one_value\", nameObj: \"loading\", payload: true });\n\n      // prevent user from sending the form again twice by clicking twice on the submit button\n      btnRef.current.disabled = true;\n\n      // console.log(state.preparation_time);\n\n      axios(options)\n        .then((response) => {\n          console.log(response.data);\n          dataToSend.current = \"\";\n\n          // dispatch({ type: \"one_value\", nameObj: \"loading\", payload: false });\n          answerRef.current.classList.remove(\"wait\");\n          answerRef.current.classList.add(\"fine\");\n          dispatch({ type: \"reset\", payload: \"\" });\n\n          dispatch({\n            type: \"one_value\",\n            nameObj: \"finalResponse\",\n            payload: \"Your order has been sent successfully!\",\n          });\n\n          btnRef.current.disabled = false;\n        })\n        .catch((error) => {\n          console.log(error.message);\n          dataToSend.current = \"\";\n\n          dispatch({ type: \"one_value\", nameObj: \"loading\", payload: false });\n\n          answerRef.current.classList.remove(\"wait\");\n          answerRef.current.classList.add(\"bad\");\n\n          dispatch({\n            type: \"one_value\",\n            nameObj: \"finalResponse\",\n            payload: error.message,\n          });\n          btnRef.current.disabled = false;\n        });\n    } else if (validationFinished === \"error\") {\n      answerRef.current.classList.remove(\"fine\");\n      answerRef.current.classList.add(\"bad\");\n\n      inputRef.current.forEach((el) => {\n        const elName = el.getAttribute(\"name\");\n        if (state[elName][\"check\"] === \"\") {\n          el.classList.remove(\"inCorrect\");\n          el.classList.add(\"correct\");\n        } else {\n          el.classList.remove(\"correct\");\n          el.classList.add(\"inCorrect\");\n        }\n      });\n\n      dispatch({\n        type: \"one_value\",\n        nameObj: \"finalResponse\",\n        payload: \"There is a mistake!\",\n      });\n    }\n  }, [validationFinished]);\n\n  // set dynamically the bubble's 'left' attribute\n  const getOutputStyle = useCallback(\n    (inputVal, elTrg, unit) => {\n      const styles = getComputedStyle(elTrg);\n      const padding =\n        parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);\n\n      const elWidth = elTrg.clientWidth;\n\n      const bubbleWidth = parseFloat(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--bubble-width\"\n        )\n      );\n\n      const thumbWidth = parseFloat(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--thumb-width\"\n        )\n      );\n      const thumbBorderWidth = parseFloat(\n        getComputedStyle(document.documentElement).getPropertyValue(\n          \"--thumb-border-width\"\n        )\n      );\n      const thumbMargLeft = 1;\n\n      if (elTrg !== undefined && elTrg !== null) {\n        let refObjMin = parseInt(elTrg.getAttribute(\"min\"));\n        let refObjMax = parseInt(elTrg.getAttribute(\"max\"));\n\n        const ratio =\n          ((parseInt(inputVal) - refObjMin) * 100) / (refObjMax - refObjMin);\n\n        const leftDistance =\n          ((padding / 2 +\n            thumbMargLeft +\n            (thumbWidth + thumbBorderWidth * 2) / 2 -\n            bubbleWidth / 2) *\n            100) /\n          elWidth;\n\n        const rightDistance =\n          ((padding + (thumbWidth + thumbBorderWidth * 2)) * 100) / elWidth;\n\n        const changeableDistance = (rightDistance * ratio) / 100;\n\n        dispatch({\n          type: \"outputStyle\",\n          payload: ratio + leftDistance - changeableDistance + unit,\n        });\n        return false;\n      }\n    },\n    [spiciness_scale, outputStyle]\n  );\n\n  const handleChanging = (e) => {\n\n    // clean the finalResponse text while ordering a new product\n    if (validationFinished !== \"not\") {\n      // dispatch({ type: \"one_value\", nameObj: \"finalResponse\", payload: \"\" });\n      dispatch({ type: \"one_value\", nameObj: \"finalResponse\", payload: \"Hungry?\" });\n      dispatch({\n        type: \"one_value\",\n        nameObj: \"validationFinished\",\n        payload: \"not\",\n      });\n    }\n\n    if (e.target.type === \"range\") {\n      getOutputStyle(e.target.value, e.target, \"%\");\n    }\n\n    const nameTrg = e.target.name;\n    // console.log(e.target.name);\n    // console.log(e.target.value);\n    if (\n      nameTrg === \"no_of_slices\" ||\n      nameTrg === \"spiciness_scale\" ||\n      nameTrg === \"slices_of_bread\"\n    ) {\n      dispatch({\n        type: \"input\",\n        nameObj: e.target.name,\n        payload: parseInt(e.target.value),\n      });\n    } else if (nameTrg === \"diameter\") {\n      dispatch({\n        type: \"input\",\n        nameObj: e.target.name,\n        payload: parseFloat(e.target.value),\n      });\n    } else if(nameTrg === \"type\"){\n        inputRef.current = [];\n        dispatch({\n          type: \"input\",\n          nameObj: e.target.name,\n          payload: e.target.value,\n        });\n    } else {\n      dispatch({\n        type: \"input\",\n        nameObj: e.target.name,\n        payload: e.target.value,\n      });\n    }\n\n\n  };\n\n  const chooseDataToValidate = (types) => {\n    return new Promise((resolve, reject) => {\n      let dataToSend = {};\n      let baseData = { name, preparation_time, type };\n      switch (types) {\n        case \"pizza\":\n          dataToSend = { ...baseData, no_of_slices, diameter };\n          resolve(dataToSend);\n          break;\n        case \"soup\":\n          dataToSend = { ...baseData, spiciness_scale };\n          resolve(dataToSend);\n          break;\n        case \"sandwich\":\n          dataToSend = { ...baseData, slices_of_bread };\n          resolve(dataToSend);\n          break;\n        default:\n          dataToSend = { ...baseData };\n          resolve(dataToSend);\n          break;\n      }\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    // console.log(e);\n    e.preventDefault();\n    // console.log(inputRef.current);\n    dispatch({\n      type: \"one_value\",\n      nameObj: \"validationFinished\",\n      payload: \"not\",\n    });\n    const dataToValidate = await chooseDataToValidate(type.val);\n\n    // console.log(\"Data to be validated:\");\n    // console.log(dataToValidate);\n\n    const sizeOfObjectToValid = Object.keys(dataToValidate).length;\n\n    dispatch({\n      type: \"one_value\",\n      nameObj: \"sizeOfSubmittedObject\",\n      payload: sizeOfObjectToValid,\n    });\n\n    const { arrayOfAllChecksVal, time } = await onValidation(dataToValidate, sizeOfObjectToValid);\n\n\n    // create an object to be sent\n    for (let eachProp in dataToValidate) {\n      if(eachProp === \"preparation_time\"){\n        dataToSend.current = {\n          ...dataToSend.current,\n          \"preparation_time\": time,\n        };\n      } else {\n        dataToSend.current = {\n          ...dataToSend.current,\n          [eachProp]: dataToValidate[eachProp][\"val\"],\n        };\n      }\n\n    }\n\n    // if there are no errors in input fields\n    if (arrayOfAllChecksVal.every((el) => el === true)) {\n      dispatch({\n        type: \"one_value\",\n        nameObj: \"validationFinished\",\n        payload: \"ok\",\n      });\n    } else {\n      dispatch({\n        type: \"one_value\",\n        nameObj: \"validationFinished\",\n        payload: \"error\",\n      });\n    }\n  };\n\n  // invalid-feedback refs' array\n  const addToFeedbackRef = useCallback((el) => {\n    if (el && !feedbackRef.current.includes(el)) {\n      feedbackRef.current.push(el);\n    }\n  }, []);\n\n  // input's array refs\n  const addToInputRef = useCallback(\n    (el) => {\n      if (el && !inputRef.current.includes(el)) {\n        inputRef.current.push(el);\n      }\n    },\n    [type]\n  );\n\n  const image = (\n    <img\n      alt={type.val}\n      className=\"photo hanging\"\n      src={type.val !== \"\" ? require(`./img/${type.val}.jpg`).default : \"\"}\n    />\n  );\n\n  // const answerStyle = () => {\n  //   let style;\n  //   validationFinished === \"not\" && type.val !==\"\" ? style = {padding: \"0px\"} : style = {padding: \"15px\"};\n  //   return style;\n  // };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2 className=\"title hide-upper\" ref={titleRef}>Let's have a delicious meal!</h2>\n        <div className=\"dishes flex\" ref={dishesRef}>\n          <DishContext.Provider\n            value={{\n              onState: state,\n              onDispatch: dispatch,\n              onChanging: handleChanging,\n              onAddToInputRef: addToInputRef,\n              onInputRef: inputRef.current,\n              onAddToFeedbackRef: addToFeedbackRef,\n            }}\n          >\n            <Form onTypeVal={type.val} onSubmit={handleSubmit} ref={btnRef} />\n          </DishContext.Provider>\n          <div className=\"image\">\n          <div className=\"answer mrg-x-auto\" ref={answerRef} >\n            {/* { !loading ? (type.val !== \"\" ? image  : finalResponse) : \"Wait...\"} */}\n            { !loading ? (validationFinished === \"not\" && type.val !==\"\" ? image  : finalResponse) : \"Wait...\"}\n          </div>\n\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}