{"version":3,"sources":["img sync /^/.*/.jpg$","img/pizza.jpg","img/sandwich.jpg","img/soup.jpg","img/veg10.jpg","img/veg4.jpg","img/veg8.jpg","components/Input.jsx","components/Form.jsx","components/useValidation.js","functions/setOutputStyle.js","functions/onSubmit.js","App.js","functions/appearing.js","functions/handleAPI.js","functions/onChanging.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Input","React","forwardRef","ref","tagType","title","errorMsg","optionNames","props","state","useContext","DishContext","onState","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","outputStyle","loading","validationFinished","name","options","useMemo","ind","defaultValue","hidden","label","value","select","className","htmlFor","input","val","range","style","memo","Form","onTypeVal","onSubmit","dishContext","handleChanging","onChanging","addToInputRef","onAddToInputRef","useEffect","forPizza","step","required","min","max","onChange","check","forSoup","forSandwich","placeholder","pattern","onClick","useValidation","dispatch","arrayOfAllChecksValue","useRef","checkTimeLength","isValidTime","time","current","length","test","RegExp","onValidation","dataToCheck","size","Promise","reject","timeChecked","count","eachProp","valueWithoutSpaces","toString","split","join","push","nameObj","payload","arrayOfAllChecksVal","validator","isAlpha","isNumeric","valueWithoutSpacesToNumber","parseInt","parseFloat","undefined","setOutputStyle","inputVal","elTrg","unit","styles","getComputedStyle","padding","paddingLeft","paddingRight","elWidth","clientWidth","bubbleWidth","document","documentElement","getPropertyValue","thumbWidth","thumbBorderWidth","refObjMin","getAttribute","refObjMax","ratio","chooseDataToValidate","baseData","dataToSendCurr","preventDefault","a","dataToSend","dataToValidate","sizeOfObjectToValid","every","el","createContext","inputInitState","sort","initialState","left","sizeOfSubmittedObject","finalResponse","reducer","action","App","useReducer","titleRef","inputRef","answerRef","dishesRef","btnRef","replyRef","inputRefCurr","btnRefCurr","forEach","classes","classList","hideClassName","Array","from","filter","startsWith","elName","classNameDirection","substr","indexOf","children","lastElementChild","setTimeout","add","remove","contains","appearInput","elVal","method","url","headers","data","replyRefCurr","JSON","stringify","console","log","disabled","axios","then","response","catch","error","message","handleAPI","handleSubmit","useCallback","includes","image","alt","src","require","default","reply","Provider","onDispatch","target","nameTrg","onInputRef","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d698502.chunk.js","sourcesContent":["var map = {\n\t\"./pizza.jpg\": 151,\n\t\"./sandwich.jpg\": 152,\n\t\"./soup.jpg\": 153,\n\t\"./veg10.jpg\": 154,\n\t\"./veg4.jpg\": 155,\n\t\"./veg8.jpg\": 156\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 150;","export default __webpack_public_path__ + \"static/media/pizza.a8e2abcd.jpg\";","export default __webpack_public_path__ + \"static/media/sandwich.4c85b99e.jpg\";","export default __webpack_public_path__ + \"static/media/soup.eae9ab6c.jpg\";","export default __webpack_public_path__ + \"static/media/veg10.e9165112.jpg\";","export default __webpack_public_path__ + \"static/media/veg4.5db3e508.jpg\";","export default __webpack_public_path__ + \"static/media/veg8.d77e34bf.jpg\";","import React, { useContext, useMemo } from \"react\";\r\nimport { DishContext } from \"../App\";\r\n\r\n// function Input({ tagType, title, errorMsg, optionNames = \"\", ...props }) {\r\nconst Input = React.forwardRef(\r\n  ({ tagType, title, errorMsg, optionNames = \"\", ...props }, ref) => {\r\n    const dishContext = useContext(DishContext);\r\n    const state = dishContext.onState;\r\n\r\n    const {\r\n      preparation_time,\r\n      type,\r\n      no_of_slices,\r\n      diameter,\r\n      spiciness_scale,\r\n      slices_of_bread,\r\n      outputStyle,\r\n      loading,\r\n      validationFinished,\r\n    } = state;\r\n\r\n    const { name } = props;\r\n\r\n    const options = useMemo(() => {\r\n      if (tagType === \"select\") {\r\n        return [...optionNames].map((name, ind) => {\r\n          if (name === \"default\") {\r\n            return (\r\n              <option defaultValue hidden label=\" \" key={ind}>\r\n                select an option\r\n              </option>\r\n            );\r\n          } else {\r\n            return (\r\n              <option value={name} key={ind}>\r\n                {name}\r\n              </option>\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        return null;\r\n      }\r\n    }, [type]);\r\n\r\n    const select = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <select {...props} ref={ref}>\r\n            {options}\r\n          </select>\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [type, loading, validationFinished]);\r\n\r\n    const input = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <input {...props} ref={ref} />\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [\r\n      preparation_time,\r\n      type.val,\r\n      no_of_slices,\r\n      diameter,\r\n      state.name,\r\n      slices_of_bread,\r\n      name,\r\n    ]);\r\n\r\n    const range = useMemo(() => {\r\n      return (\r\n        <div className=\"input-block\">\r\n          <label htmlFor={name}>{title}</label>\r\n          <input {...props} ref={ref} />\r\n          <output className=\"bubble\" style={outputStyle} htmlFor={name}>\r\n            {state[name][\"val\"]}\r\n          </output>\r\n          {errorMsg && <span className=\"invalid-feedback\">{errorMsg}</span>}\r\n        </div>\r\n      );\r\n    }, [type, spiciness_scale, outputStyle]);\r\n\r\n    return (\r\n      <>{tagType === \"input\" ? input : tagType === \"select\" ? select : range}</>\r\n    );\r\n  }\r\n);\r\n\r\n// export default Input;\r\nexport default React.memo(Input);\r\n","import React, { useContext, useEffect, useMemo, useRef } from \"react\";\r\nimport { DishContext } from \"../App\";\r\nimport Input from \"./Input\";\r\n\r\nconst Form = React.forwardRef(({ onTypeVal, onSubmit }, ref) => {\r\n  const dishContext = useContext(DishContext);\r\n  const state = dishContext.onState;\r\n  const handleChanging = dishContext.onChanging;\r\n  const addToInputRef = dishContext.onAddToInputRef;\r\n\r\n  const {\r\n    name,\r\n    preparation_time,\r\n    type,\r\n    no_of_slices,\r\n    diameter,\r\n    spiciness_scale,\r\n    slices_of_bread,\r\n    outputStyle,\r\n  } = state;\r\n\r\n  useEffect(() => {\r\n    // console.log(no_of_slices);\r\n    // console.log(spiciness_scale);\r\n    // console.log(spiciness_scale[\"val\"]);\r\n    // console.log(slices_of_bread);\r\n    // console.log(slices_of_bread[\"val\"]);\r\n  });\r\n\r\n  const forPizza = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"flex hide-up trans\" ref={addToInputRef}>\r\n            <div className=\"one-column\">\r\n              <Input\r\n                tagType=\"input\"\r\n                title=\"No of slices\"\r\n                name=\"no_of_slices\"\r\n                type=\"number\"\r\n                id=\"no_of_slices\"\r\n                className=\"form-control\"\r\n                step={1}\r\n                aria-label=\"no_of_slices\"\r\n                required={onTypeVal === \"pizza\" ? true : false}\r\n                min={1}\r\n                max={30}\r\n                value={no_of_slices[\"val\"]}\r\n                onChange={handleChanging}\r\n                errorMsg={no_of_slices.check}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"one-column\">\r\n              <Input\r\n                tagType=\"input\"\r\n                title=\"diameter\"\r\n                name=\"diameter\"\r\n                type=\"number\"\r\n                id=\"diameter\"\r\n                className=\"form-control\"\r\n                step={0.1}\r\n                aria-label=\"diameter\"\r\n                required={onTypeVal === \"pizza\" ? true : false}\r\n                min={0.1}\r\n                max={50}\r\n                value={diameter[\"val\"]}\r\n                onChange={handleChanging}\r\n                errorMsg={diameter.check}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, diameter, no_of_slices]);\r\n\r\n  const forSoup = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto narrow\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"range hide-left trans\" ref={addToInputRef}>\r\n            {/* <div className=\"range hide-left\" ref={forSoupRef}> */}\r\n            {/* <div className=\"range input-cont hide-up\" ref={forSoupRef}> */}\r\n            {/* <div className=\"mrg-x-auto hide-up\" ref={forSoupRef}> */}\r\n            <Input\r\n              tagType=\"range\"\r\n              title=\"Spiciness scale\"\r\n              name=\"spiciness_scale\"\r\n              type=\"range\"\r\n              id=\"spiciness_scale\"\r\n              className=\"form-control form-control-range\"\r\n              step={1}\r\n              aria-label=\"spiciness_scale\"\r\n              required={onTypeVal === \"soup\" ? true : false}\r\n              data-sizing=\"px\"\r\n              min={1}\r\n              max={10}\r\n              value={spiciness_scale[\"val\"]}\r\n              onChange={handleChanging}\r\n              errorMsg={spiciness_scale.check}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, spiciness_scale, outputStyle]);\r\n\r\n  const forSandwich = useMemo(() => {\r\n    return (\r\n      <div className=\"mrg-x-auto narrow\">\r\n        <div className=\"input-cont\">\r\n          <div className=\"number-width hide-right trans\" ref={addToInputRef}>\r\n            {/* <div className=\"number-width hide-right\" ref={forSandwichRef}> */}\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"No of slices\"\r\n              name=\"slices_of_bread\"\r\n              type=\"number\"\r\n              id=\"slices_of_bread\"\r\n              className=\"form-control\"\r\n              step={1}\r\n              aria-label=\"slices_of_bread\"\r\n              required={onTypeVal === \"sandwich\" ? true : false}\r\n              min={1}\r\n              value={slices_of_bread.val}\r\n              // value={state[slices_of_bread][\"val\"]}\r\n              onChange={handleChanging}\r\n              errorMsg={slices_of_bread.check}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [type, slices_of_bread]);\r\n\r\n  return (\r\n    <form id=\"dishes-form\">\r\n      <div className=\"row center\">\r\n        <div className=\"input-cont\">\r\n          <div\r\n            className=\"hide-left narrow-70 mrg-x-auto trans\"\r\n            ref={addToInputRef}\r\n          >\r\n            {/* <div className=\"hide-left narrow-70 mrg-x-auto\" ref={nameRef}> */}\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"Dish name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              placeholder=\"Type dish name\"\r\n              aria-label=\"name\"\r\n              required={true}\r\n              value={name[\"val\"]}\r\n              onChange={handleChanging}\r\n              errorMsg={name.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-cont\">\r\n          <div\r\n            className=\"trans hide-right narrow-70 mrg-x-auto\"\r\n            ref={addToInputRef}\r\n          >\r\n            {/* <div className=\"hide-right narrow-70 mrg-x-auto\" ref={timeRef}> */}\r\n            <Input\r\n              tagType=\"input\"\r\n              title=\"Preparation time\"\r\n              name=\"preparation_time\"\r\n              type=\"time\"\r\n              id=\"preparation_time\"\r\n              className=\"form-control\"\r\n              step={1}\r\n              aria-label=\"preparation_time\"\r\n              required={true}\r\n              min={\"00:15:00\"}\r\n              pattern={\"[0-9]{2}:[0-9]{2}:[0-9]{2}\"}\r\n              value={preparation_time[\"val\"]}\r\n              onChange={handleChanging}\r\n              errorMsg={preparation_time.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-cont\">\r\n          <div\r\n            className=\"hide-up narrow-70 mrg-x-auto trans\"\r\n            ref={addToInputRef}\r\n          >\r\n            {/* <div className=\"hide-up narrow-70 mrg-x-auto\" ref={addToInputRef}> */}\r\n            {/* <div className=\"hide-up narrow-70 mrg-x-auto\" ref={selectRef}> */}\r\n            <Input\r\n              tagType=\"select\"\r\n              title=\"Type\"\r\n              name=\"type\"\r\n              id=\"type\"\r\n              className=\"form-control form-control-lg\"\r\n              optionNames={[\"default\", \"pizza\", \"soup\", \"sandwich\"]}\r\n              aria-label=\"type\"\r\n              required={true}\r\n              value={type[\"val\"]}\r\n              onChange={handleChanging}\r\n              errorMsg={type.check}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {onTypeVal === \"pizza\"\r\n          ? forPizza\r\n          : onTypeVal === \"soup\"\r\n          ? forSoup\r\n          : onTypeVal === \"sandwich\"\r\n          ? forSandwich\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"row center\">\r\n        <div className=\"buttons col\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-check hide-down\"\r\n            ref={ref}\r\n            onClick={onSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n  // };\r\n});\r\n\r\n// export default Form;\r\nexport default React.memo(Form);\r\n","import { useRef } from \"react\";\r\nimport validator from \"validator\";\r\n\r\nconst useValidation = (dispatch) => {\r\n  const arrayOfAllChecksValue = useRef([]);\r\n  const checkTimeLength = useRef();\r\n\r\n  // check time format\r\n  // 3 groups of 2 character separated by : each character must be a digit contained in that specific ranges\r\n  const isValidTime = (time) => {\r\n    checkTimeLength.current = \"\";\r\n    if (time.length < 8) {\r\n      time = time + \":00\";\r\n    } \r\n\r\n    if (time < \"00:15:00\") {\r\n      checkTimeLength.current = \"We need at least 15 min to prepare the dish!\";\r\n    }\r\n    const regexpAll = new RegExp(\r\n      /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/\r\n    );\r\n\r\n    return {test: regexpAll.test(time), time: time};\r\n  };\r\n\r\n  // main validation function\r\n  const onValidation = (dataToCheck, size) => {\r\n\r\n    arrayOfAllChecksValue.current = [];\r\n    return new Promise((resolve, reject) => {\r\n      let count = 0, timeChecked;\r\n      for (let eachProp in dataToCheck) {\r\n        count++;\r\n\r\n        // get rid of whitespaces\r\n        const valueWithoutSpaces = dataToCheck[eachProp][\"val\"]\r\n          .toString()\r\n          .split(\" \")\r\n          .join(\"\");\r\n\r\n        // if there is no data or it is NaN though should be a number\r\n        if (valueWithoutSpaces.length <= 0 || valueWithoutSpaces === \"NaN\") {\r\n          arrayOfAllChecksValue.current.push(false);\r\n          dispatch({\r\n            type: \"input_check\",\r\n            nameObj: `${eachProp}`,\r\n            payload: \"This field has to be filled in\",\r\n          });\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: dataToCheck.preparation_time.val });\r\n        } else if (valueWithoutSpaces.length > 30) {\r\n          arrayOfAllChecksValue.current.push(false);\r\n          dispatch({\r\n            type: \"input_check\",\r\n            nameObj: `${eachProp}`,\r\n            payload: \"Use max 30 characters\",\r\n          });\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: dataToCheck.preparation_time.val });\r\n        } else {\r\n          // run validation accordingly to the input 'type' ('sort' in state)\r\n          switch (dataToCheck[eachProp][\"sort\"]) {\r\n            case \"text\":\r\n              if (!validator.isAlpha(valueWithoutSpaces)) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only letters\",\r\n                });\r\n              } else {\r\n                arrayOfAllChecksValue.current.push(true);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"\",\r\n                });\r\n              }\r\n              break;\r\n\r\n            case \"intNumber\":\r\n            case \"floatNumber\":\r\n              // if value of the number fits within 'min' and 'max' attributes check\r\n              if (!validator.isNumeric(valueWithoutSpaces)) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only numbers\",\r\n                });\r\n              } else {\r\n                // if the value is NUMERIC, CHECK IF THE VALUE IS NOT TOO BIG OR NOT TOO SMALL accordingly its 'min' and 'max' attributes set in the input attributes and in the state\r\n                let valueWithoutSpacesToNumber;\r\n\r\n                if (eachProp === \"intNumber\") {\r\n                  valueWithoutSpacesToNumber = parseInt(valueWithoutSpaces);\r\n                } else {\r\n                  valueWithoutSpacesToNumber = parseFloat(valueWithoutSpaces);\r\n                }\r\n                let min, max;\r\n                if (\r\n                  dataToCheck[eachProp][\"min\"] !== null &&\r\n                  dataToCheck[eachProp][\"min\"] !== undefined\r\n                ) {\r\n                  min = dataToCheck[eachProp][\"min\"];\r\n                }\r\n                if (\r\n                  dataToCheck[eachProp][\"max\"] !== null &&\r\n                  dataToCheck[eachProp][\"max\"] !== undefined\r\n                ) {\r\n                  max = dataToCheck[eachProp][\"max\"];\r\n                }\r\n\r\n                if (valueWithoutSpacesToNumber < min) {\r\n                  arrayOfAllChecksValue.current.push(false);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"The number is too small\",\r\n                  });\r\n\r\n                } else if (valueWithoutSpacesToNumber > max) {\r\n                  arrayOfAllChecksValue.current.push(false);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"The number is too big\",\r\n                  });\r\n                } else {\r\n                  arrayOfAllChecksValue.current.push(true);\r\n                  dispatch({\r\n                    type: \"input_check\",\r\n                    nameObj: `${eachProp}`,\r\n                    payload: \"\",\r\n                  });\r\n                }\r\n              }\r\n\r\n              break;\r\n\r\n            case \"time\":\r\n              const { test, time } = isValidTime(valueWithoutSpaces);\r\n              timeChecked = time;\r\n              if (!test) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"Please use only numbers in time format\",\r\n                });\r\n              } else if (\r\n                test &&\r\n                checkTimeLength.current !== \"\"\r\n              ) {\r\n                arrayOfAllChecksValue.current.push(false);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: checkTimeLength.current,\r\n                });\r\n              } else {\r\n                arrayOfAllChecksValue.current.push(true);\r\n                dispatch({\r\n                  type: \"input_check\",\r\n                  nameObj: `${eachProp}`,\r\n                  payload: \"\",\r\n                });\r\n              }\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        if (count >= size) {\r\n          resolve({arrayOfAllChecksVal: arrayOfAllChecksValue.current, time: timeChecked });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return { onValidation };\r\n};\r\n\r\nexport default useValidation;\r\n","export const setOutputStyle = \r\n  (inputVal, elTrg, unit, dispatch) => {\r\n\r\n    const styles = getComputedStyle(elTrg);\r\n    const padding =\r\n      parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);\r\n\r\n    const elWidth = elTrg.clientWidth;\r\n\r\n    const bubbleWidth = parseFloat(\r\n      getComputedStyle(document.documentElement).getPropertyValue(\r\n        \"--bubble-width\"\r\n      )\r\n    );\r\n\r\n    const thumbWidth = parseFloat(\r\n      getComputedStyle(document.documentElement).getPropertyValue(\r\n        \"--thumb-width\"\r\n      )\r\n    );\r\n    const thumbBorderWidth = parseFloat(\r\n      getComputedStyle(document.documentElement).getPropertyValue(\r\n        \"--thumb-border-width\"\r\n      )\r\n    );\r\n    const thumbMargLeft = 1;\r\n\r\n    if (elTrg !== undefined && elTrg !== null) {\r\n      let refObjMin = parseInt(elTrg.getAttribute(\"min\"));\r\n      let refObjMax = parseInt(elTrg.getAttribute(\"max\"));\r\n\r\n      const ratio =\r\n        ((parseInt(inputVal) - refObjMin) * 100) / (refObjMax - refObjMin);\r\n\r\n      const leftDistance =\r\n        ((padding / 2 +\r\n          thumbMargLeft +\r\n          (thumbWidth + thumbBorderWidth * 2) / 2 -\r\n          bubbleWidth / 2) *\r\n          100) /\r\n        elWidth;\r\n\r\n      const rightDistance =\r\n        ((padding + (thumbWidth + thumbBorderWidth * 2)) * 100) / elWidth;\r\n\r\n      const changeableDistance = (rightDistance * ratio) / 100;\r\n\r\n      dispatch({\r\n        type: \"outputStyle\",\r\n        payload: ratio + leftDistance - changeableDistance + unit,\r\n      });\r\n      return false;\r\n    }\r\n  };","// const chooseDataToValidate = (types) => {\r\nconst chooseDataToValidate = (state) => {\r\n\r\n    const {\r\n        name,\r\n        preparation_time,\r\n        type,\r\n        no_of_slices,\r\n        diameter,\r\n        spiciness_scale,\r\n        slices_of_bread,\r\n      } = state;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let dataToSend = {};\r\n      let baseData = { name, preparation_time, type };\r\n      if(type.val === undefined || type.val === null){\r\n          reject(\"Please select a type\");\r\n      } else {\r\n        switch (type.val) {\r\n            case \"pizza\":\r\n              dataToSend = { ...baseData, no_of_slices, diameter };\r\n              resolve(dataToSend);\r\n              break;\r\n            case \"soup\":\r\n              dataToSend = { ...baseData, spiciness_scale };\r\n              resolve(dataToSend);\r\n              break;\r\n            case \"sandwich\":\r\n              dataToSend = { ...baseData, slices_of_bread };\r\n              resolve(dataToSend);\r\n              break;\r\n            default:\r\n              dataToSend = { ...baseData };\r\n              resolve(dataToSend);\r\n              break;\r\n          }\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n\r\nexport const onSubmit = (e, dispatch, onValidation, dataToSendCurr, state) =>{\r\n  e.preventDefault();\r\n\r\n  return new Promise( async(resolve, reject)=>{\r\n\r\n    let dataToSend = {};\r\n    \r\n        dispatch({\r\n          type: \"one_value\",\r\n          nameObj: \"validationFinished\",\r\n          payload: \"not\",\r\n        });\r\n        const dataToValidate = await chooseDataToValidate(state);\r\n    \r\n        // console.log(\"Data to be validated:\");\r\n        // console.log(dataToValidate);\r\n    \r\n        const sizeOfObjectToValid = Object.keys(dataToValidate).length;\r\n    \r\n        dispatch({\r\n          type: \"one_value\",\r\n          nameObj: \"sizeOfSubmittedObject\",\r\n          payload: sizeOfObjectToValid,\r\n        });\r\n    \r\n        const { arrayOfAllChecksVal, time } = await onValidation(\r\n          dataToValidate,\r\n          sizeOfObjectToValid\r\n        );\r\n    \r\n        // console.log(dataToValidate);\r\n\r\n        // create an object to be sent\r\n        for (let eachProp in dataToValidate) {\r\n          if (eachProp === \"preparation_time\") {\r\n            dataToSend = {\r\n              ...dataToSend,\r\n              preparation_time: time,\r\n            };\r\n          } else {\r\n            dataToSend = {\r\n              ...dataToSend,\r\n              [eachProp]: dataToValidate[eachProp][\"val\"],\r\n            };\r\n          }\r\n        }\r\n    \r\n        // if there are no errors in input fields\r\n        if (arrayOfAllChecksVal.every((el) => el === true)) {\r\n          dispatch({\r\n            type: \"one_value\",\r\n            nameObj: \"validationFinished\",\r\n            payload: \"ok\",\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: \"one_value\",\r\n            nameObj: \"validationFinished\",\r\n            payload: \"error\",\r\n          });\r\n        }\r\n\r\n        resolve(dataToSend);\r\n  })\r\n   \r\n}","import React, { useEffect, useReducer, useRef, useCallback } from \"react\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\nimport \"./css/style.css\";\nimport useValidation from \"./components/useValidation\";\nimport { appearInput } from \"./functions/appearing\";\nimport { setOutputStyle } from \"./functions/setOutputStyle\";\nimport { onChanging } from \"./functions/onChanging\";\nimport { onSubmit } from \"./functions/onSubmit\";\nimport { handleAPI } from \"./functions/handleAPI\";\n\nexport const DishContext = React.createContext();\n\n// 'val' = value, 'sort' = type of input, 'check' = prop for message got back after validation\n// 'min' and 'max' are attributes of inputs - I put them here so prevent user from manipulating these values in the browser\nconst inputInitState = {\n  name: { val: \"\", sort: \"text\", check: \"\" },\n  preparation_time: { val: \"00:15:00\", sort: \"time\", check: \"\" },\n  type: { val: \"\", sort: \"text\", check: \"\" },\n  no_of_slices: { val: 1, sort: \"intNumber\", check: \"\", min: 1, max: 30 },\n  diameter: { val: 0.1, sort: \"floatNumber\", check: \"\", min: 0.1, max: 50 },\n  spiciness_scale: { val: 1, sort: \"intNumber\", check: \"\", min: 1, max: 10 },\n  slices_of_bread: { val: 1, sort: \"intNumber\", check: \"\", min: 1 },\n};\n\nconst initialState = {\n  ...inputInitState,\n  outputStyle: { left: \"0\" },\n  sizeOfSubmittedObject: 0,\n  validationFinished: \"not\",\n  finalResponse: \"Hungry?\",\n  loading: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // for setting inputs' values in the state\n    case \"input\":\n      return {\n        ...state,\n        [action.nameObj]: { ...state[action.nameObj], val: action.payload },\n      };\n\n    // for setting \"check\" prop of input object in the state (replay) after validation of the input' value\n    case \"input_check\":\n      return {\n        ...state,\n        [action.nameObj]: { ...state[action.nameObj], check: action.payload },\n      };\n\n    // to set value of simple type of objects / vars: strings, number or boolean (sizeOfSubmittedObject, validationFinished, finalResponse, loading)\n    case \"one_value\":\n      return { ...state, [action.nameObj]: action.payload };\n\n    // to set left value of the \"bubble\" output\n    case \"outputStyle\":\n      return {\n        ...state,\n        outputStyle: { ...state.outputStyle, left: action.payload },\n        // outputStyle: { ...state.outputStyle, marginLeft: action.payload },\n      };\n\n    case \"reset\":\n      return {\n        ...state,\n        ...inputInitState,\n        outputStyle: { left: \"0\" },\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // custom hook for validation of data form\n  const { onValidation } = useValidation(dispatch);\n\n  // main title ref\n  const titleRef = useRef();\n\n  // array of inputs' refs\n  const inputRef = useRef([]);\n\n  const dataToSend = useRef({});\n\n  // refs to particular divs\n  const answerRef = useRef();\n  const dishesRef = useRef();\n\n  // ref to submit btn\n  const btnRef = useRef();\n\n  // reply (with finalResponse) ref\n  const replyRef = useRef();\n\n  const {\n    type,\n    validationFinished,\n    finalResponse,\n    loading,\n  } = state;\n\n  useEffect(() => {\n    // console.log(type.val);\n    // hello();\n  }, []);\n\n  // handle input appearing animation\n  useEffect(() => {\n    appearInput(inputRef.current, btnRef.current);\n  }, [type]);\n\n  // handle main title appearing and \"Hungry?\" question\n  useEffect(() => {\n\n    if( titleRef.current !== undefined && titleRef.current !== null){\n      setTimeout(() => {\n        titleRef.current.classList.add(\"drop-fast\");\n        titleRef.current.classList.remove(\"hide-upper\");\n      }, 1500);\n\n    }\n\n    if( replyRef.current !== undefined && replyRef.current !== null){\n        replyRef.current.classList.add(\"hello\");\n    }\n\n  }, []);\n\n  useEffect(() => {\n    // call a function to set a left distance of bubble with the default value - dedicated to \"range\" type input\n    if (inputRef.current !== undefined && inputRef.current !== null) {\n      inputRef.current.forEach((el) => {\n        const elType = el.getAttribute(\"type\");\n        if (elType === \"range\") {\n          const elVal = el.getAttribute(\"value\");\n          // set dynamically the bubble's 'left' attribute\n          setOutputStyle(elVal, el, \"%\", dispatch);\n        }\n      });\n    }\n  }, [type]);\n\n  // final step with API Post Request\n  useEffect(() => {\n    const options = {\n      method: \"POST\",\n      url: \"https://jsonplaceholder.typicode.com/posts\",\n      headers: { \"Content-type\": \"application/json\" },\n      data: dataToSend.current,\n    };\n\n    handleAPI(validationFinished, options, dispatch, dataToSend.current, replyRef.current, btnRef.current);\n    if (validationFinished === \"ok\"){\n      dataToSend.current = {};\n    }\n\n  }, [validationFinished]);\n\n  const handleChanging = (e) => {\n    onChanging(e, validationFinished, inputRef, dispatch);\n  };\n\n  const handleSubmit = async (e) => {\n    dataToSend.current =  await onSubmit(e, dispatch, onValidation, dataToSend.current, state);\n    // console.log(dataToSend.current);\n  };\n\n  // input's array refs\n  const addToInputRef = useCallback(\n    (el) => {\n      if (el && !inputRef.current.includes(el)) {\n        inputRef.current.push(el);\n      }\n    },\n    [type]\n  );\n\n  const image = (\n    <img\n      alt={type.val}\n      className=\"photo hanging\"\n      src={type.val !== \"\" ? require(`./img/${type.val}.jpg`).default : \"\"}\n    />\n  );\n\n  const reply = (\n    <p className=\"reply\" ref={replyRef}>{loading ? \"Wait...\" : finalResponse}</p>\n    // <p className=\"reply hidden\" ref={replyRef}>{finalResponse}</p>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2 className=\"title hide-upper\" ref={titleRef}>\n          Let's have a delicious meal!\n        </h2>\n        <div className=\"dishes flex\" ref={dishesRef}>\n          <DishContext.Provider\n            value={{\n              onState: state,\n              onDispatch: dispatch,\n              onChanging: handleChanging,\n              onAddToInputRef: addToInputRef,\n              onInputRef: inputRef.current,\n            }}\n          >\n            <Form onTypeVal={type.val} onSubmit={handleSubmit} ref={btnRef} />\n          </DishContext.Provider>\n          <div className=\"image\">\n            <div className=\"answer mrg-x-auto\" ref={answerRef}>\n              {/* {!loading ? validationFinished === \"not\" && type.val !== \"\" ? image : finalResponse : \"Wait...\"} */}\n              {!loading && validationFinished === \"not\" && type.val !== \"\" ? image : reply }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// {!loading\n//   ? validationFinished === \"not\" && type.val !== \"\"\n//     ? image\n//     : finalResponse\n//   : \"Wait...\"}","export const appearInput = (inputRefCurr, btnRefCurr) => {\r\n  const time = 2500, timeAdd = 700;\r\n  \r\n  if (inputRefCurr !== undefined && inputRefCurr !== null) {\r\n    inputRefCurr.forEach((el) => {\r\n\r\n      const classes = el.classList;\r\n\r\n      const classesArr = Array.from(classes);\r\n\r\n    const hideClassName = classesArr.filter( el => el.startsWith(\"hide\"));\r\n\r\n        if(hideClassName.length > 0){\r\n          const classNameDirection = hideClassName[0].substr(hideClassName[0].indexOf(\"-\"));\r\n\r\n        let elName;\r\n\r\n        // get the 'name' attribute of the input / select field\r\n        if (el.children.length > 1) {\r\n          elName =\r\n            el.children[0].children[0].lastElementChild.getAttribute(\"name\");\r\n        } else {\r\n          elName = el.children[0].children[1].getAttribute(\"name\");\r\n        }\r\n \r\n        if (elName !== \"name\" && elName !== \"preparation_time\" && elName !== \"type\") {\r\n          setTimeout(() => {\r\n            el.classList.add(\"show\"+classNameDirection);\r\n            el.classList.remove(hideClassName[0]);\r\n          }, 100);\r\n        } else {\r\n          setTimeout(() => {\r\n            el.classList.add(\"show\"+classNameDirection);\r\n            el.classList.remove(hideClassName[0]);\r\n          }, elName === \"name\" ? time : elName === \"preparation_time\" ? time+timeAdd : time+ (timeAdd*2));\r\n        }\r\n\r\n      } \r\n \r\n      if (\r\n        btnRefCurr !== undefined &&\r\n        btnRefCurr !== null &&\r\n        btnRefCurr.classList.contains(\"hide-down\")\r\n      ) {\r\n        setTimeout(() => {\r\n          btnRefCurr.classList.add(\"show-down\");\r\n          btnRefCurr.classList.remove(\"hide-down\");\r\n        }, time+ (timeAdd*3));\r\n      }\r\n    });\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const handleAPI = (validationFinished, options, dispatch, dataToSendCurr, replyRefCurr, btnRefCurr) => {\r\n    if (validationFinished === \"ok\") {\r\n        dataToSendCurr = JSON.stringify(dataToSendCurr);\r\n  \r\n        console.log(\"Data to be send:\");\r\n        console.log(dataToSendCurr);\r\n  \r\n        replyRefCurr.classList.remove(\"bad\");\r\n        replyRefCurr.classList.add(\"wait\");\r\n  \r\n        dispatch({ type: \"one_value\", nameObj: \"loading\", payload: true });\r\n  \r\n        // prevent user from sending the form again twice by clicking twice on the submit button\r\n        btnRefCurr.disabled = true;\r\n  \r\n        axios(options)\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            // dataToSendCurr = \"\";\r\n  \r\n            replyRefCurr.classList.remove(\"wait\");\r\n            replyRefCurr.classList.add(\"fine\");\r\n            dispatch({ type: \"reset\", payload: \"\" });\r\n  \r\n            dispatch({\r\n              type: \"one_value\",\r\n              nameObj: \"finalResponse\",\r\n              payload: \"Your order has been sent successfully!\",\r\n            });\r\n  \r\n            btnRefCurr.disabled = false;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error.message);\r\n            // dataToSendCurr = \"\";\r\n  \r\n            dispatch({ type: \"one_value\", nameObj: \"loading\", payload: false });\r\n  \r\n            replyRefCurr.classList.remove(\"wait\");\r\n            replyRefCurr.classList.add(\"bad\");\r\n  \r\n            dispatch({\r\n              type: \"one_value\",\r\n              nameObj: \"finalResponse\",\r\n              payload: error.message,\r\n            });\r\n            btnRefCurr.disabled = false;\r\n          });\r\n      } else if (validationFinished === \"error\") {\r\n        replyRefCurr.classList.remove(\"fine\");\r\n        replyRefCurr.classList.add(\"bad\");\r\n  \r\n        dispatch({\r\n          type: \"one_value\",\r\n          nameObj: \"finalResponse\",\r\n          payload: \"There is a mistake!\",\r\n        });\r\n      }\r\n}","import { setOutputStyle } from \"./setOutputStyle\";\r\n\r\nexport const onChanging = (e, validationFinished, inputRef, dispatch)=> {\r\n     // clean the finalResponse text while ordering a new product\r\n     if (validationFinished !== \"not\") {\r\n        dispatch({\r\n          type: \"one_value\",\r\n          nameObj: \"finalResponse\",\r\n          payload: \"Hungry?\",\r\n        });\r\n        dispatch({\r\n          type: \"one_value\",\r\n          nameObj: \"validationFinished\",\r\n          payload: \"not\",\r\n        });\r\n      }\r\n  \r\n      if (e.target.type === \"range\") {\r\n        setOutputStyle(e.target.value, e.target, \"%\", dispatch);\r\n      }\r\n  \r\n      const nameTrg = e.target.name;\r\n      if (\r\n        nameTrg === \"no_of_slices\" ||\r\n        nameTrg === \"spiciness_scale\" ||\r\n        nameTrg === \"slices_of_bread\"\r\n      ) {\r\n        dispatch({\r\n          type: \"input\",\r\n          nameObj: e.target.name,\r\n          payload: parseInt(e.target.value),\r\n        });\r\n      } else if (nameTrg === \"diameter\") {\r\n        dispatch({\r\n          type: \"input\",\r\n          nameObj: e.target.name,\r\n          payload: parseFloat(e.target.value),\r\n        });\r\n      } else if (nameTrg === \"type\") {\r\n        inputRef.current = [];\r\n        dispatch({\r\n          type: \"input\",\r\n          nameObj: e.target.name,\r\n          payload: e.target.value,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: \"input\",\r\n          nameObj: e.target.name,\r\n          payload: e.target.value,\r\n        });\r\n      }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}